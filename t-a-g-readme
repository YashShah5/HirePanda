# Postflight Tag Validation

`tag-validation.py`

This script is used to **compare tags** between a **source** and **destination** GitHub repository and identify any tags that are missing in the destination repository. It uses environment variables to configure authentication and repo details, fetches tags from each repository, and writes missing tags to a CSV file.

---

## Required Scopes for Tokens

The script requires two tokens: `SOURCE_TOKEN` and `DESTINATION_TOKEN`. These tokens must have the following scopes:

- **repo**: Full control of private repositories (to fetch tags from source and destination).  
- **admin:org**: Full control of organizations to fetch organization details.

---

## Configuration

Configuration is done via environment variables. These should be defined in a `.env` file:

- `SOURCE_BASE_URL`: (Optional) Base URL for GitHub Enterprise for the source repo.  
- `SOURCE_TOKEN`: GitHub token for the source repository.  
- `SOURCE_ORG`: Organization name of the source repository.  
- `SOURCE_REPO`: Name of the source repository.  
- `DESTINATION_TOKEN`: GitHub token for the destination repository.  
- `DESTINATION_ORG`: Organization name of the destination repository.  
- `DESTINATION_REPO`: Name of the destination repository.  
- `OUTPUT_CSV`: Name of the output CSV file (default: `missing_tags.csv`).

---

## Functions

- **authenticate_github(token, base_url)**: Authenticates to GitHub with the provided token.  
- **validate_auth(token, org_name, base_url, label)**: Validates authentication for the given org and label.  
- **fetch_tags(repo)**: Fetches all tags from a given repository.  
- **compare_tags(source_tags, destination_tags)**: Compares tags from source and destination, returning missing tags.  
- **write_csv(missing_tags)**: Writes missing tags to a CSV file.  
- **verify_tags()**: Main function that runs the verification process and writes missing tags to CSV.

---

## Running the Script

```bash
python3 tag-validation.py












### Story
https://jira-dc.qualcomm.com/jira/browse/PDLMGIT-261

### Description
This PR adds a robust org-level tag validation script. The script compares the number of tags in each repository within the source and destination GitHub organizations. It ensures that all tags present in the source org are also present in the destination org.

### Key Features
- Authenticates to GitHub for both source and destination organizations.
- Iterates over all repositories in the source org.
- Compares tags for each repo and identifies missing tags in the destination.
- Logs the results and writes a detailed CSV report with any missing tags.
- Includes enhanced error handling and improved logging for clarity.

### Why?
This script ensures that after migration, no tags are lost and all tags are consistently present across both source and destination organizations.

### Migration Status
https://github.com/qcom-github-admin/migration-scripts/actions/runs/15567474345

### Sample CSV Output
| Repository Name     | Missing Tag Name | Commit SHA                               |
|----------------------|------------------|------------------------------------------|
| pages-tag-check     | 1.0.1            | e7b94ef318e84dd15d4cf4fcf19c7f3a2cb1b    |
| commits-pass        | tag-102.697f...  | 697f109d987a1cb7b19a942a5ec1ca60b0a01d72 |

### Next Steps
- Please confirm that this script meets migration goals and standards.
- Let me know if any adjustments or additions are needed!









### PR Summary

**Story:** https://jira-dc.qualcomm.com/jira/browse/PDLMGIT-230

**What:**  
- Adds a script to check repo sizes across the entire organization  
- Classifies each repo based on size:  
  - Simple: <10GB (10240MB)  
  - Medium: 10–20GB (10240–20480MB)  
  - Complex: >20GB (20480MB+)  
- Generates a CSV with:  
  - Repository name  
  - Size (MB)  
  - Classification  
  - Preflight Check Result (Pass/Fail)

**Why:**  
- Quickly identifies large repos before migration  
- CSV can be shared with other teams  
- Logs any errors for easier follow-up

**Example CSV output:**



